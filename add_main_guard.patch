 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF'
diff --git a/src/doctr_process/doctr_mod/doctr_ocr_to_csv.py b/src/doctr_process/doctr_mod/doctr_ocr_to_csv.py
index d70ef1b16387d7606a0c8718502268b116fac472..e3fd720580781d9307d601151e9a31e40ca1fe16 100644
--- a/src/doctr_process/doctr_mod/doctr_ocr_to_csv.py
+++ b/src/doctr_process/doctr_mod/doctr_ocr_to_csv.py
@@ -480,27 +480,32 @@ def run_pipeline():

     reporting_utils.create_reports(all_rows, cfg)
     reporting_utils.export_preflight_exceptions(preflight_exceptions, cfg)
     reporting_utils.export_log_reports(cfg)

     if cfg.get("run_type", "initial") == "validation":
         _validate_with_hash_db(all_rows, cfg)
     else:
         _append_hash_db(all_rows, cfg)

     if cfg.get("profile"):
         _write_performance_log(perf_records, cfg)


     reporting_utils.export_issue_logs(ticket_issues, issues_log, cfg)
     reporting_utils.export_process_analysis(analysis_records, cfg)

     if cfg.get("valid_pages_zip"):
         vendor_dir = os.path.join(cfg.get("output_dir", "./outputs"), "vendor_docs")
         zip_folder(vendor_dir, os.path.join(cfg.get("output_dir", "./outputs"), "valid_pages.zip"))

     logging.info("Output written to: %s", cfg.get("output_dir", "./outputs"))
     logging.info("Total batch time: %.2fs", time.perf_counter() - batch_start)


-if __name__ == "__main__":
+def main() -> None:
+    """CLI entry point for running the OCR pipeline."""
     run_pipeline()
+
+
+if __name__ == "__main__":
+    main()

EOF
)
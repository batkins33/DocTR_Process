In this repo the output generation is primarily handled in the modular_analyzer package.
The README lists all expected files under the output/<vendor>/<pdf_name>/ folder:


## 📑 Output Files
...
| `ticket_numbers.csv` / `.xlsx` | Extracted ticket data in CSV and Excel formats. The Excel file highlights rows where `ticket_valid` is missing or not `valid`. |
| `ticket_issues.csv`            | One-line summary of any missing ticket numbers |
| `issues_log.csv`               | Detailed per-field issue log |
| `thumbnail_index.csv`          | Mapping of cropped thumbnails to their source pages |
| `process_analysis.csv`         | Timing analysis for each page |
| `summary_report.csv`           | Aggregated counts of valid/missing pages |
| `crops/`                       | Cropped field images for each page |
| `thumbnails/`                  | Thumbnail versions of the cropped fields |
| `valid_pages.zip`              | ZIP archive containing pages deemed valid |
| `modular_analyzer/analyzer.log`| Runtime log of the application |
| `error.log` and `log_report.*` | Captures uncaught exceptions, with CSV/HTML exports |


Key modules for output
File utilities – saving CSV/Excel and zipping files
modular_analyzer/file_utils.py:


save_csv writes generic CSV files.


color_code_excel converts ticket_numbers.csv to XLSX and highlights rows where
ticket_valid is missing or not "valid".


zip_folder zips the “valid” pages folder.


save_entries_to_excel creates both CSV and Excel files for ticket numbers.


def save_csv(data, columns, filepath):
    ...
    writer = csv.DictWriter(f, fieldnames=columns)
    writer.writeheader()
    writer.writerows(data)


def color_code_excel(output_dir):
    ...
    wb.save(xlsx_path)
    logging.info(f"Excel file saved with highlights: {xlsx_path}")


def zip_folder(folder_path, output_zip_path):
    ...
    logging.info(f"Zipped valid pages: {output_zip_path}")


def save_entries_to_excel(entries, output_dir, base_name):
    ...
    df.to_csv(csv_path, index=False)
    df.to_excel(xlsx_path, index=False)


Reporting utilities – creating summary and log files
modular_analyzer/reporting_utils.py:


collect_summary_report, collect_thumbnail_index, collect_issue_log, and collect_process_timings each write a CSV to the output directory.


export_logs_to_csv and export_logs_to_html generate human‑readable log reports.


auto_export_logs automatically exports error.log when the program exits.


def collect_summary_report(output_dir, entries):
    ...
    df.to_csv(path, index=False)


def collect_thumbnail_index(output_dir, thumbnail_log):
    ...
    df.to_csv(path, index=False)


def collect_issue_log(output_dir, issue_log):
    ...
    df.to_csv(path, index=False)


def collect_process_timings(output_dir, timing_log):
    ...
    df.to_csv(path, index=False)


def export_logs_to_csv(log_file_path, output_csv_path):
    ...
    writer = csv.DictWriter(f, fieldnames=["datetime", "level", "file", "line", "message"])


def export_logs_to_html(log_file_path, output_html_path):
    ...
    f.write("</body></html>")


def auto_export_logs():
    log_file = "error.log"
    export_logs_to_csv(log_file, "log_report.csv")
    export_logs_to_html(log_file, "log_report.html")
atexit.register(auto_export_logs)


Page processor – saving cropped regions and thumbnails
modular_analyzer/page_processor.py creates per‑page folders and files:


crops_dir = os.path.join(output_dir, "crops")
thumbnails_dir = os.path.join(output_dir, "thumbnails")
os.makedirs(crops_dir, exist_ok=True)
os.makedirs(thumbnails_dir, exist_ok=True)


save_crop_and_thumbnail(region, crops_dir, f"{short_name}_{page_num}",
                        thumbnails_dir, thumbnail_log)


Main orchestration – where these utilities are called
In modular_analyzer/main.py, after processing all pages the program writes every report:


save_entries_to_excel(entries, output_dir, structured_name)
save_csv(ticket_issues, columns=["Page", "Issue"], filepath=os.path.join(output_dir, "ticket_issues.csv"))
save_csv(issue_logs, columns=["Page", "IssueType", "FieldName"], filepath=os.path.join(output_dir, "issues_log.csv"))
save_csv(thumbnails, columns=["Page", "Field", "ThumbnailPath"], filepath=os.path.join(output_dir, "thumbnail_index.csv"))
save_csv(timings, columns=["Page", "DurationSeconds"], filepath=os.path.join(output_dir, "process_analysis.csv"))


collect_summary_report(output_dir, entries)
color_code_excel(output_dir)
zip_folder(os.path.join(output_dir, "valid"), os.path.join(output_dir, "valid_pages.zip"))


These functions produce the CSV, Excel, thumbnail, and log files documented in the README.
To make another application output similar reports, you would replicate or adapt these utilities—particularly file_utils.py for CSV/XLSX/zipping and reporting_utils.py for summary/log exports—then invoke them in the appropriate places in your other application's workflow.